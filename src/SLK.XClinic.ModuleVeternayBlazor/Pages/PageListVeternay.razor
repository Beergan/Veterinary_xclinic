@page "/customer/list"
@inject Microsoft.JSInterop.IJSRuntime jSRuntime
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using System.Linq
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using System.Data
@using Syncfusion.XlsIO
@using System.IO
@using Syncfusion.Blazor.Calendars
@attribute [Authorize]
@inject IVeternayCustomer _svc
@inject ISweetAlertService swal
@inject ITextTranslator Text
@inject FieldExtractor<EntityVeternayCustomer> field


<SfDialog Target="#target" MinHeight ="70%" Width ="800px" Height ="600%" class="dialog-create-employee" IsModal="true" ShowCloseIcon="true" @bind-Visible="_modalVisible">
    <DialogTemplates>
        <Header><span class="title">@_modalTitle</span></Header>
        <Content>
            <EditForm id="editForm" Model="@_model" OnValidSubmit="@OnFormSubmit">
                <DataAnnotationsValidator />
                <div class="form-group row">
                    <div class="col-md-6 mt-3 mt-xl-0 mt-md-0">
                       <div class="row">
                            <div class="col-lg-12">
                                <div class="row">
                                    <label for="name" class="col-md-12 col-form-label">Họ và tên*</label>
                                    <div class="col-md-12">
                                        <SfTextBox Placeholder="Họ và tên" @bind-Value="_model.FullName" />
                                        <CustomValidationMessage style="color: red;" For="@(() => _model.FullName)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="row">
                                    <label for="email" class="col-md-12 col-form-label">Email</label>
                                    <div class="col-md-12">
                                        <SfTextBox Placeholder="Email" @bind-Value="_model.Email" />
                                        <CustomValidationMessage style="color: red;" For="@(() => _model.Email)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="row">
                                    <label for="phone" class="col-md-12 col-form-label">Phone*</label>
                                    <div class="col-md-12">
                                        <SfTextBox Placeholder="Phone" @bind-Value="_model.Phone" />
                                        <CustomValidationMessage style="color: red;" For="@(() => _model.Phone)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="row">
                                    <label for="address" class="col-md-12 col-form-label">Địa chỉ</label>
                                    <div class="col-md-12">
                                        <SfTextBox Placeholder="Địa chỉ" @bind-Value="_model.Address" />
                                        <CustomValidationMessage style="color: red;" For="@(() => _model.Address)" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="row">
                                    <label for="name" class="col-md-12 col-form-label">Ghi chú</label>
                                    <div class="col-md-12">
                                        <InputTextArea  rows="4" id="note" class="form-control" @bind-Value="_model.Note" />
                                        <CustomValidationMessage For="@(() => _model.Note)" />
                                    </div>
                                </div>
                            </div>
                       </div>
                    </div>
                    <div class="col-lg-6">
                        <button class="bubbly-button" type="button" @onclick="AddPest"> + Thêm Thú Cưng</button>
                        @if (_formPet != null)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5>Nhập Thông Tin Thú Cưng</h5>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="petName" class="col-form-label">Tên Thú Cưng</label>
                                            <SfTextBox Placeholder="Tên thú cưng" @bind-Value="_formPet.Name" />
                                            <CustomValidationMessage style="color: red;" For="@(() => _formPet.Name)" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="petType" class="col-form-label">Loại Thú Cưng</label>
                                            <SfComboBox  TItem="OptionDual<string>" TValue="string" PopupHeight="230px"
                                                        @bind-Value="@_formPet.Species" DataSource="@BasicCodes.PetSpeciesOptions">
                                                <ComboBoxFieldSettings Text="@Text["TextEn", "TextVi"]" Value="Value" />
                                                <DropDownListEvents TItem="OptionDual<string>" TValue="string" />
                                            </SfComboBox>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">s
                                            <label for="petBreed" class="col-form-label">Giống Loài</label>
                                            <SfTextBox Placeholder="Giống loài" @bind-Value="_formPet.Breed" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="petAge" class="col-form-label">Tuổi</label>
                                            <SfNumericTextBox Placeholder="Tuổi" @bind-Value="_formPet.Age" Min="0" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="petGender" class="col-form-label">Giới Tính</label>
                                            <SfComboBox TItem="OptionDual<string>" TValue="string" PopupHeight="230px"
                                                        @bind-Value="@_formPet.Gender" DataSource="@BasicCodes.GenderOptions">
                                                <ComboBoxFieldSettings Text="@Text["TextEn", "TextVi"]" Value="Value" />
                                                <DropDownListEvents TItem="OptionDual<string>" TValue="string" />
                                            </SfComboBox>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="petNotes" class="col-form-label">Ghi Chú</label>
                                            <InputTextArea rows="3" class="form-control" @bind-Value="_formPet.MedicalNotes" />
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-md-12">
                                            <button type="button" class="btn btn-success me-2" @onclick="SavePet">Lưu Thú Cưng</button>
                                            <button type="button" class="btn btn-secondary" @onclick="CancePet">Hủy</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <!-- Danh sách thú cưng đã thêm -->
                        @if (_model.Pets != null && _model.Pets.Any())
                        {
                            <h5>Danh Sách Thú Cưng</h5>
                            <ul class="list-group mb-3">
                                @foreach (var pet in _model.Pets)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@pet.Name (@pet.Species, @pet.Breed, @pet.Age tuổi, @pet.Gender)</span>
                                        <div class="d-flex align-items-center">
                                            <a class="btn btn-success  btn-sm" @onclick="() => EditPet(pet)">Sửa</a>
                                            <a class="btn btn-danger btn-sm" @onclick="() => RemotePet(pet)">Xóa</a>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
                
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="@OnModalClosed"></DialogEvents>
    <DialogButtons>
        <DialogButton form=editForm class="btn-submit" Type="Syncfusion.Blazor.Popups.ButtonType.Submit" IsPrimary="false" Content="Xác nhận"></DialogButton>
    </DialogButtons>
</SfDialog>
<div class="app-content-wrapper">
    @if (active)
    {
        <div class="app-content-head" style="height: auto">
            <div class="row" style="padding: 0 0 0 5px">
                <div class="col-12">
                    <ol class="breadcrumb">
                        <li>Nhân sự</li>
                        <li style="color: #777">&nbsp; / &nbsp;</li>
                        <li class="active text-primary"> Danh sách</li>
                    </ol>
                </div>
                <div class="col-md-4 col-lg-3 d-none d-md-block">
                    <div class="input-group">
                        <input type="text" class="form-control" style="height: 31px;" placeholder="@Text["Search...", "Tìm kiếm..."]" @bind="_filterSearch" @bind:event="oninput" @onkeyup="OnChange" />
                        <div class="input-group-append">
                            <span class="input-group-text bg-white" style="height: 31px;" id="basic-addon2"><i class="fas fa-search"></i></span>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-8 col-lg-9 text-right">
                    <div class="btn-group pr-0">
                        <button class="btn btn-light float-right newplus mr-2" @onclick="NewEmployee_Click"><span class="fas fa-plus"></span> @Text["Customer", "Khách hàng"]</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="app-content-body" style="overflow:auto" id="target">
            <div class="container-fluid" style="overflow:auto">
                <SfGrid AllowTextWrap="true" ID="Grid" @ref="_grid" EnableHover="true" AllowResizing="true" DataSource="@_displaySource" AllowPaging="true" AllowFiltering="true" AllowSorting="true"
                        EnableAdaptiveUI="false" AllowExcelExport="true" AllowPdfExport="true" ShowColumnChooser="true" EnableVirtualization="false" Height="100%">
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
                    <GridPageSettings PageSize="50"></GridPageSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(EntityVeternayCustomer.FullName) HeaderText="@Text[field[nameof(EntityVeternayCustomer.FullName)]]" Width="160">
                            <Template>
                                @{
                                    var item = (context as EntityVeternayCustomer);
                                    <a href="/customer/profile/@item.Guid" class="fullname">
                                        @item.FullName
                                    </a>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(EntityVeternayCustomer.Phone) HeaderText="@Text[field[nameof(EntityVeternayCustomer.Phone)]]" Width="160"></GridColumn>
                        <GridColumn Field=@nameof(EntityVeternayCustomer.Email) HeaderText="@Text[field[nameof(EntityVeternayCustomer.Email)]]" Width="160"></GridColumn>
                        <GridColumn Field=@nameof(EntityVeternayCustomer.Pets) HeaderText="@Text[field[nameof(EntityVeternayCustomer.Pets)]]" Width="160">
                            <Template>
                                @{
                                    var pets = context as EntityVeternayCustomer;
                                }
                                @if (pets.Pets != null && pets.Pets.Any())
                                {
                                    <ul class="list-group mb-3">
                                        @foreach (var pet in pets.Pets)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>@pet.Name (@pet.Species, @pet.Breed, @pet.Age tuổi, @pet.Gender)</span>
                                            </li>
                                        }
                                    </ul>
                                }
                            </Template>
                        </GridColumn>
                          <GridColumn HeaderText="@Text["Functions", "Chức năng"]" Width="110" TextAlign="TextAlign.Right">
                            <Template>
                                @{
                                    var item = (context as EntityVeternayCustomer);
                                    <SfDropDownButton CssClass="e-caret-hide float-right" style="padding-left: 13px;" IconCss="fas fa-ellipsis-v">
                                        <DropDownMenuItems>
                                            <DropDownButtonEvents ItemSelected="SelectedTask"></DropDownButtonEvents>
                                            <DropDownMenuItem Id="@(item.Id.ToString())" Text="Sửa"></DropDownMenuItem>
                                        </DropDownMenuItems>
                                    </SfDropDownButton>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    }
</div>
<style>
    .bubbly-button {
        display: inline-block;
        font-size: 1em;
        padding: 1em 2em;
        margin-top: 5px;
        margin-bottom: 5px;
        -webkit-appearance: none;
        appearance: none;
        background-color: rgba(89, 74, 226, 1);
        color: white;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        position: relative;
        transition: transform ease-in 0.1s, box-shadow ease-in 0.25s;
        &:focus
    {
        outline: 0;
    }

    &:before, &:after {
        position: absolute;
        content: '';
        display: block;
        width: 140%;
        height: 100%;
        left: -20%;
        z-index: -1000;
        transition: all ease-in-out 0.5s;
        background-repeat: no-repeat;
    }

    &:before {
        display: none;
        top: -75%;
        background-image: radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, transparent 20%, $button-bg 20%, transparent 30%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, transparent 10%, $button-bg 15%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%);
        background-size: 10% 10%, 20% 20%, 15% 15%, 20% 20%, 18% 18%, 10% 10%, 15% 15%, 10% 10%, 18% 18%;
        //background-position: 0% 80%, -5% 20%, 10% 40%, 20% 0%, 30% 30%, 22% 50%, 50% 50%, 65% 20%, 85% 30%;
    }

    &:after {
        display: none;
        bottom: -75%;
        background-image: radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, transparent 10%, $button-bg 15%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%), radial-gradient(circle, $button-bg 20%, transparent 20%);
        background-size: 15% 15%, 20% 20%, 18% 18%, 20% 20%, 15% 15%, 10% 10%, 20% 20%;
        //background-position: 5% 90%, 10% 90%, 10% 90%, 15% 90%, 25% 90%, 25% 90%, 40% 90%, 55% 90%, 70% 90%;
    }

    &:active {
        transform: scale(0.9);
        background-color: darken($button-bg, 5%);
        box-shadow: 0 2px 25px rgba(255, 0, 130, 0.2);
    }

    &.animate {
        &:before

    {
        display: block;
        animation: topBubbles ease-in-out 0.75s forwards;
    }

    &:after {
        display: block;
        animation: bottomBubbles ease-in-out 0.75s forwards;
    }

    }
    }


    @@keyframes topBubbles {
        0%

    {
        background-position: 5% 90%, 10% 90%, 10% 90%, 15% 90%, 25% 90%, 25% 90%, 40% 90%, 55% 90%, 70% 90%;
    }

    50% {
        background-position: 0% 80%, 0% 20%, 10% 40%, 20% 0%, 30% 30%, 22% 50%, 50% 50%, 65% 20%, 90% 30%;
    }

    100% {
        background-position: 0% 70%, 0% 10%, 10% 30%, 20% -10%, 30% 20%, 22% 40%, 50% 40%, 65% 10%, 90% 20%;
        background-size: 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%;
    }

    }

    @@keyframes bottomBubbles {
        0%

    {
        background-position: 10% -10%, 30% 10%, 55% -10%, 70% -10%, 85% -10%, 70% -10%, 70% 0%;
    }

    50% {
        background-position: 0% 80%, 20% 80%, 45% 60%, 60% 100%, 75% 70%, 95% 60%, 105% 0%;
    }

    100% {
        background-position: 0% 90%, 20% 90%, 45% 70%, 60% 110%, 75% 80%, 95% 70%, 110% 10%;
        background-size: 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%;
    }

    }
</style>
<script>
        var animateButton = function(e) {

      e.preventDefault;
      e.target.classList.remove('animate');

      e.target.classList.add('animate');
      setTimeout(function(){
        e.target.classList.remove('animate');
      },700);
    };

    var bubblyButtons = document.getElementsByClassName("bubbly-button");

    for (var i = 0; i < bubblyButtons.length; i++) {
      bubblyButtons[i].addEventListener('click', animateButton, false);
    }
</script>
@code {
    #region vavariables
    [Parameter]
    public string str { get; set; }
    private SfGrid<EntityVeternayCustomer> _grid;
    private IEnumerable<EntityVeternayCustomer> _dataSource = new List<EntityVeternayCustomer>();
    private List<EntityVeternayCustomer> _displaySource = new();
    private List<OptionItem<Guid>> _optOffices = new();
    private List<OptionItem<Guid>> _optJob = new();
    private EntityveternayPet _formPet = null;
    private EntityVeternayCustomer _model = new();
    private EntityveternayPet _editPets = null;
    private bool active = false;
    private bool _modalVisible = false;
    private bool _filter = false;
    private string _modalTitle;
    private bool _add_Pets  = false;
    private string _filterSearch;
    #endregion
    #region events
    protected override async Task OnInitializedAsync()
    {
        _ = swal.Loading("Nạp thông tin ..");


        await RereshData();
        StateHasChanged();
    }

    private void NewEmployee_Click()
    {
        _modalTitle = "Thêm Khách hàng";
        _modalVisible = true;
    }

    private void OnModalClosed(Object args)
    {
        _model = new EntityVeternayCustomer();
        _formPet = null;
        _editPets = null;
    }
    #endregion

    #region methods
    private async Task RereshData()
    {

        var rsp = await AppStatic.CallApi(() => _svc.GetList());
        if (!rsp.Success)
        {
            _ = swal.Error(rsp.Message);
            return;
        }

        active = true;
        _dataSource = rsp.Items;

        _displaySource = _dataSource.OrderByDescending(x => x.Id).ToList();

        await swal.Close();
        StateHasChanged();
    }

    private async void OnFormSubmit()
    {
        _modalVisible = false;
        _ = swal.Loading("Lưu thông tin..");

        if (string.IsNullOrWhiteSpace(_model.FullName) || string.IsNullOrWhiteSpace(_model.Phone) )
        {
            _ = swal.Error("Vui lòng điền đầy đủ thông tin KH bắt buộc (*).");
            return;
        }
        var rsp = await AppStatic.CallApi(() => _svc.Save(_model));
        if (!rsp.Success)
        {
            _ = swal.Error(rsp.Message);
            return;
        }
        await RereshData();
    }

    private void OnChange()
    {
        var query = _dataSource.AsQueryable();

        if (!string.IsNullOrWhiteSpace(_filterSearch))
            query = query.Where(w => w.FullName.ToLower().Contains(_filterSearch.ToLower()));

        _displaySource = query.OrderByDescending(o => o.Id).ToList();
        StateHasChanged();
    }

    private async void Modify(int id)
    {
        var item = _dataSource.Single(t => t.Id == id);
        _model = item;

        _modalTitle = "Hiệu chỉnh khách hàng";
        _modalVisible = true;

        await Task.CompletedTask;
    }

    private void SelectedTask(MenuEventArgs e)
    {
        string text = e.Item.Text.ToLower();
        int id = Convert.ToInt32(e.Item.Id);
        if (text == "sửa")
            Modify(id);
    }

    private void AddPest()
    {
        _formPet = new();
        _editPets = null;
    }
    private void SavePet()
    {
        if (_formPet != null)
        {
            if (string.IsNullOrWhiteSpace(_formPet.Name) || string.IsNullOrWhiteSpace(_formPet.Species) || string.IsNullOrWhiteSpace(_formPet.Gender))
            {
                _ = swal.Error("Vui lòng điền đầy đủ thông tin bắt buộc (Tên, Loại, Giới tính).");
                return;
            }
            if(_editPets != null)
            {
                _model.Pets.Remove(_editPets);
                _model.Pets.Add(_formPet);

            }else
            {
                _formPet.Guid = Guid.NewGuid();
                _model.Pets.Add(_formPet);

            }
            _editPets = null;
            _formPet = null;
            StateHasChanged();
        }
    }
    private void EditPet(EntityveternayPet pet)
    {
        _formPet = new()
        {
            Guid = pet.Guid,
            Name = pet.Name,
            Species = pet.Species,
            Breed = pet.Breed,
            Age = pet.Age,
            Gender = pet.Gender,
            MedicalNotes = pet.MedicalNotes
        };
        _editPets = pet;
        StateHasChanged();
    }
    private void CancePet()
    {
        _formPet = null;
        StateHasChanged();
    }
    private void RemotePet(EntityveternayPet pet)
    {
        if (_model.Pets.Contains(pet))
        {
            _model.Pets.Remove(pet);
            StateHasChanged();
        }
    }
    #endregion
}